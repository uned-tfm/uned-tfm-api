import {
  MalwareEvolution,
  MalwareEvolutionProperties
} from '../../../domain/models/malware-evolution.entity';
import { PostgresMapper } from '../../../../shared/infrastructure/postgresql/postgresql-mapper';
import { Primitives } from '../../../../shared/domain/value-objects/entity';
import { hasValue } from '../../../../shared/utils/type-checkers';

export type MalwareEvolutionPostgresDTO = {
  num_week?: string;
  month?: string;
  year?: string;
  country?: string;
  count: string;
};

export class PostgresqlMalwareEvolutionMapper extends PostgresMapper<
  Primitives<MalwareEvolutionProperties>,
  MalwareEvolutionPostgresDTO
> {
  private static DICTIONARY: Record<
    keyof Primitives<MalwareEvolutionProperties>,
    keyof MalwareEvolutionPostgresDTO
  > = {
    week: 'num_week',
    month: 'month',
    year: 'year',
    country: 'country',
    count: 'count'
  };

  constructor() {
    super(PostgresqlMalwareEvolutionMapper.DICTIONARY);
  }

  toDto(entity: Primitives<MalwareEvolutionProperties>): MalwareEvolutionPostgresDTO {
    return super.toDto(entity);
  }

  fromDTO(dto: MalwareEvolutionPostgresDTO): MalwareEvolution {
    return MalwareEvolution.create({
      ...super.fromDto(dto),
      week: hasValue(dto.num_week) ? parseInt(dto.num_week) : undefined,
      month: hasValue(dto.month) ? parseInt(dto.month) : undefined,
      year: hasValue(dto.year) ? parseInt(dto.year) : undefined,
      count: parseInt(dto.count)
    });
  }
}
