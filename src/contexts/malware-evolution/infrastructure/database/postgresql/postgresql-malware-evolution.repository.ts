import { DatabaseConnector } from '../../../../shared/domain/contracts/database-connector';
import { Pool } from 'pg';
import { MalwareEvolutionRepository } from '../../../domain/contracts/malware-evolution.repository';
import {
  MalwareEvolutionPostgresDTO,
  PostgresqlMalwareEvolutionMapper
} from './postgresql-malware-evolution.mapper';
import { MalwareEvolution } from '../../../domain/models/malware-evolution.entity';
import { isEmpty, isNil } from '../../../../shared/utils/type-checkers';

export function postgresqlMalwareEvolutionRepositoryBuilder({
  databaseConnector
}: {
  databaseConnector: DatabaseConnector<Pool>;
}): MalwareEvolutionRepository {
  const mapper = new PostgresqlMalwareEvolutionMapper();

  async function find(sql: string, params: number[] = []): Promise<MalwareEvolution[]> {
    const pool = await databaseConnector.getConnection();
    const result = await pool.query<MalwareEvolutionPostgresDTO>(sql, params);

    if (isNil(result.rows) || isEmpty(result.rows)) {
      return [];
    }

    return result.rows.map((malwareEvolution: MalwareEvolutionPostgresDTO) =>
      mapper.fromDTO(malwareEvolution)
    );
  }

  return {
    async findByWeek(): Promise<MalwareEvolution[]> {
      return find(
        'select num_week, year, count(*) as count from malware.malware_data_filtered GROUP BY num_week, year ORDER BY year asc, num_week asc'
      );
    },
    async findByMonth(): Promise<MalwareEvolution[]> {
      return find(
        'select month, year, count(*) from malware.malware_data_filtered GROUP BY month, year ORDER BY year asc, month asc'
      );
    },
    async findByCountry(): Promise<MalwareEvolution[]> {
      return find(
        'select num_week, year, country, count(*) from malware.malware_data_filtered GROUP BY num_week, year, country ORDER BY year asc, num_week asc, country asc'
      );
    },
    async findByMonthPeriod(month: number, year: number): Promise<MalwareEvolution[]> {
      return find(
        'select month, count(*) from malware.malware_data_filtered WHERE year = $1 and month = $2 GROUP BY month',
        [year, month]
      );
    },
    async findByYearPeriod(year: number): Promise<MalwareEvolution[]> {
      return find(
        'select year, count(*) from malware.malware_data_filtered WHERE year = $1 GROUP BY year',
        [year]
      );
    }
  };
}
