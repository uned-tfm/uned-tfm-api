import { MalwareEvolution } from '../domain/models/malware-evolution.entity';
import { MalwareEvolutionRepository } from '../domain/contracts/malware-evolution.repository';
import { UseCase } from '../../shared/application/use-case';
import { EnumValueObject } from '../../shared/domain/value-objects/enum-value-object';
import { NumberValueObject } from '../../shared/domain/value-objects/number-value-object';

export enum PERIOD_TYPES {
  ONE_MONTH = 'one-month',
  ONE_YEAR = 'one-year'
}

export type FindByPeriodInput = {
  type: PERIOD_TYPES;
  month?: number;
  year: number;
};

export function findByPeriodBuilder({
  malwareEvolutionRepository
}: {
  malwareEvolutionRepository: MalwareEvolutionRepository;
}): UseCase<FindByPeriodInput, MalwareEvolution[]> {
  function validateInput(input: FindByPeriodInput): void {
    EnumValueObject.initiate('type', input.type, PERIOD_TYPES);
    NumberValueObject.create('year', input.year);

    if (input.type === PERIOD_TYPES.ONE_MONTH) {
      NumberValueObject.create('month', input.month);
    }
  }

  return async function findByPeriod(input: FindByPeriodInput): Promise<MalwareEvolution[]> {
    validateInput(input);

    if (input.type === PERIOD_TYPES.ONE_MONTH) {
      return malwareEvolutionRepository.findByMonthPeriod(input.month, input.year);
    }

    return malwareEvolutionRepository.findByYearPeriod(input.year);
  };
}
