import { PostgresMapper } from '../../../../shared/infrastructure/postgresql/postgresql-mapper';
import { Primitives } from '../../../../shared/domain/value-objects/entity';
import { MalwareType, MalwareTypeProperties } from '../../../domain/models/malware-type.entity';

export type MalwareTypePostgresDTO = {
  malware_type?: string;
  country?: string;
  result: string;
};

export class PostgresqlMalwareTypeMapper extends PostgresMapper<
  Primitives<MalwareTypeProperties>,
  MalwareTypePostgresDTO
> {
  private static DICTIONARY: Record<
    keyof Primitives<MalwareTypeProperties>,
    keyof MalwareTypePostgresDTO
  > = {
    malwareType: 'malware_type',
    country: 'country',
    result: 'result'
  };

  constructor() {
    super(PostgresqlMalwareTypeMapper.DICTIONARY);
  }

  toDto(entity: Primitives<MalwareTypeProperties>): MalwareTypePostgresDTO {
    return super.toDto(entity);
  }

  fromDTO(dto: MalwareTypePostgresDTO): MalwareType {
    return MalwareType.create({
      ...super.fromDto(dto),
      result: parseInt(dto.result)
    });
  }
}
