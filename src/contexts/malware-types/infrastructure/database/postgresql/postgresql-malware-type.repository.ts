import { DatabaseConnector } from '../../../../shared/domain/contracts/database-connector';
import { Pool } from 'pg';

import { isEmpty, isNil } from '../../../../shared/utils/type-checkers';
import { MalwareType } from '../../../domain/models/malware-type.entity';
import { MalwareTypeRepository } from '../../../domain/contracts/malware-type.repository';
import {
  MalwareTypePostgresDTO,
  PostgresqlMalwareTypeMapper
} from './postgresql-malware-type.mapper';

export function postgresqlMalwareTypeRepositoryBuilder({
  databaseConnector
}: {
  databaseConnector: DatabaseConnector<Pool>;
}): MalwareTypeRepository {
  const mapper = new PostgresqlMalwareTypeMapper();

  async function find(sql: string, params: number[] = []): Promise<MalwareType[]> {
    const pool = await databaseConnector.getConnection();
    const result = await pool.query<MalwareTypePostgresDTO>(sql, params);

    if (isNil(result.rows) || isEmpty(result.rows)) {
      return [];
    }

    return result.rows.map((fileFeature: MalwareTypePostgresDTO) => mapper.fromDTO(fileFeature));
  }

  return {
    async findByMalwareType(): Promise<MalwareType[]> {
      return find(
        'select malware_type, count(*) as result from malware.malware_data_filtered GROUP BY malware_type ORDER BY count(*) desc'
      );
    },
    async findByCountry(): Promise<MalwareType[]> {
      return find(
        'select country, malware_type, count(*) as result from malware.malware_data_filtered GROUP BY country, malware_type ORDER BY country asc, count(*) desc'
      );
    },
    async findMoreNumDetections(): Promise<MalwareType[]> {
      return find(
        'select malware_type, sum(num_detections) as result from malware.malware_data_filtered GROUP BY malware_type ORDER BY sum(num_detections) desc'
      );
    }
  };
}
