import { mock } from 'jest-mock-extended';
import { UseCase } from '../../../../contexts/shared/application/use-case';
import { MalwareTypeRepository } from '../../../../contexts/malware-types/domain/contracts/malware-type.repository';
import { MalwareType } from '../../../../contexts/malware-types/domain/models/malware-type.entity';
import { MalwareTypeBuilder } from '../__mocks__/malware-type.builder';
import { findMoreNumDetectionsBuilder } from '../../../../contexts/malware-types/application/find-more-num-detections.usecase';

describe('Find all malware type data usecase', () => {
  const mockMalwareTypeRepository = mock<MalwareTypeRepository>();

  let findMoreNumDetections: UseCase<void, MalwareType[]>;
  let validMalwareTypes: MalwareType[];

  beforeAll(() => {
    validMalwareTypes = [MalwareTypeBuilder().build()];

    findMoreNumDetections = findMoreNumDetectionsBuilder({
      malwareTypeRepository: mockMalwareTypeRepository
    });
  });

  it('It should return malware type data grouped by num detections', async () => {
    mockMalwareTypeRepository.findMoreNumDetections.mockResolvedValue(validMalwareTypes);

    const result = await findMoreNumDetections();

    expect(mockMalwareTypeRepository.findMoreNumDetections).toBeCalled();
    expect(result).not.toBeNull();
    expect(result).toHaveLength(1);
  });
});
