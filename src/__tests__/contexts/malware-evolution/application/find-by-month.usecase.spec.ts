import { mock } from 'jest-mock-extended';
import { MalwareEvolutionRepository } from '../../../../contexts/malware-evolution/domain/contracts/malware-evolution.repository';
import { UseCase } from '../../../../contexts/shared/application/use-case';
import { MalwareEvolution } from '../../../../contexts/malware-evolution/domain/models/malware-evolution.entity';
import { MalwareEvolutionBuilder } from '../__mocks__/malware-evolution.builder';
import { findByMonthBuilder } from '../../../../contexts/malware-evolution/application/find-by-month.usecase';

describe('Find all malware evolution data usecase', () => {
  const mockMalwareEvolutionRepository = mock<MalwareEvolutionRepository>();

  let findByMonth: UseCase<void, MalwareEvolution[]>;
  let validMalwareEvolutions: MalwareEvolution[];

  beforeAll(() => {
    validMalwareEvolutions = [MalwareEvolutionBuilder().build()];

    findByMonth = findByMonthBuilder({
      malwareEvolutionRepository: mockMalwareEvolutionRepository
    });
  });

  it('It should return malware evolution data grouped by month', async () => {
    mockMalwareEvolutionRepository.findByMonth.mockResolvedValue(validMalwareEvolutions);

    const result = await findByMonth();

    expect(mockMalwareEvolutionRepository.findByMonth).toBeCalled();
    expect(result).not.toBeNull();
    expect(result).toHaveLength(1);
  });
});
