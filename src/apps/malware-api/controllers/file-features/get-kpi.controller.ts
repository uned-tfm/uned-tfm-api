import { ExpressController } from '../express-controller';
import { NextFunction, Request, Response } from 'express';
import { isNil } from '../../../../contexts/shared/utils/type-checkers';
import { BadRequest } from '../../errors/http-error';
import {
  findFileFeatureAvgByFileType,
  findFileFeatureAvgByMalwareType,
  findFileFeatureByFileType,
  findFileFeatureByMalwareAndFileType
} from '../../dependencies/use-cases/file-features';
import { FileFeatureByMalwareTypeMapper } from '../../mappers/file-features/file-feature-by-malware-type.mapper';
import { OK } from 'http-status-codes';
import { FileFeatureByFileTypeMapper } from '../../mappers/file-features/file-feature-by-file-type.mapper';
import { FileFeatureByMalwareAndFileTypeMapper } from '../../mappers/file-features/file-feature-by-malware-and-file-type.mapper';

export class FindFileFeatureKPIController extends ExpressController {
  protected async implementation(req: Request, res: Response, next: NextFunction): Promise<void> {
    if (isNil(req.query) || isNil(req.query.operation)) {
      return next(BadRequest('The query params are not valid'));
    }

    switch (req.query.operation) {
      case 'avg-by-malware':
        return this.processAvgByMalwareOperation(req, res, next);
      case 'avg-by-file-type':
        return this.processAvgByFileTypeOperation(req, res, next);
      case 'count-by-file-type':
        return this.processCountByFileTypeOperation(req, res, next);
      case 'file-types-by-malware':
        return this.processMonthPeriodEvolutionOperation(req, res, next);
      default:
        return next(BadRequest('The operation is not valid'));
    }
  }

  private async processAvgByMalwareOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findFileFeatureAvgByMalwareType();
    const data = result.map(FileFeatureByMalwareTypeMapper.toDTO);
    res.status(OK).send(data);
  }

  private async processAvgByFileTypeOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findFileFeatureAvgByFileType();
    const data = result.map(FileFeatureByFileTypeMapper.toDTO);
    res.status(OK).send(data);
  }

  private async processCountByFileTypeOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findFileFeatureByFileType();
    const data = result.map(FileFeatureByFileTypeMapper.toDTO);
    res.status(OK).send(data);
  }

  private async processMonthPeriodEvolutionOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findFileFeatureByMalwareAndFileType();
    const data = result.map(FileFeatureByMalwareAndFileTypeMapper.toDTO);
    res.status(OK).send(data);
  }
}
