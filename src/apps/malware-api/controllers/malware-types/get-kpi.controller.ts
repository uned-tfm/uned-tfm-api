import { ExpressController } from '../express-controller';
import { NextFunction, Request, Response } from 'express';
import { isNil } from '../../../../contexts/shared/utils/type-checkers';
import { BadRequest } from '../../errors/http-error';
import { OK } from 'http-status-codes';
import {
  findMalwareTypeByCountry,
  findMalwareTypeByMalwareType,
  findMalwareTypeMoreNumDetections
} from '../../dependencies/use-cases/malware-types';
import { CountByCountryMapper } from '../../mappers/malware-types/count-by-country.mapper';
import { CountByMalwareTypeMapper } from '../../mappers/malware-types/count-by-malware-type.mapper';

export class FindMalwareTypeKPIController extends ExpressController {
  protected async implementation(req: Request, res: Response, next: NextFunction): Promise<void> {
    if (isNil(req.query) || isNil(req.query.operation)) {
      return next(BadRequest('The query params are not valid'));
    }

    switch (req.query.operation) {
      case 'count-by-country':
        return this.processCountByCountryOperation(req, res, next);
      case 'malware-more-detections':
        return this.processMalwareMoreDetectionOperation(req, res, next);
      case 'count-by-malware-type':
        return this.processCountByMalwareTypeOperation(req, res, next);
      default:
        return next(BadRequest('The operation is not valid'));
    }
  }

  private async processCountByCountryOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findMalwareTypeByCountry();
    const data = result.map(CountByCountryMapper.toDTO);
    res.status(OK).send(data);
  }

  private async processMalwareMoreDetectionOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findMalwareTypeMoreNumDetections();
    const data = result.map(CountByMalwareTypeMapper.toDTO);
    res.status(OK).send(data);
  }

  private async processCountByMalwareTypeOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findMalwareTypeByMalwareType();
    const data = result.map(CountByMalwareTypeMapper.toDTO);
    res.status(OK).send(data);
  }
}
