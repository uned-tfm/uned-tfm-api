import { NextFunction, Request, Response } from 'express';
import { InternalServerError } from '../errors/http-error';

function evaluateError(error: unknown, next: NextFunction): void {
  assertIsError(error);
  switch (error.constructor.name) {
    default:
      next(InternalServerError(error));
      break;
  }
}

function assertIsError(error: unknown): asserts error is Error {
  if (!(error instanceof Error)) {
    throw error;
  }
}

export abstract class ExpressController {
  protected abstract implementation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void | unknown>;

  public execute = async (req: Request, res: Response, next: NextFunction) => {
    try {
      await this.implementation(req, res, next);
    } catch (error) {
      evaluateError(error, next);
    }
  };
}
