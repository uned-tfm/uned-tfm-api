import { ExpressController } from '../express-controller';
import { NextFunction, Request, Response } from 'express';
import { isNil } from '../../../../contexts/shared/utils/type-checkers';
import { BadRequest } from '../../errors/http-error';
import {
  findMalwareEvolutionByCountry,
  findMalwareEvolutionByMonth,
  findMalwareEvolutionByPeriod,
  findMalwareEvolutionByWeek
} from '../../dependencies/use-cases/malware-evolution';
import { MalwareEvolutionByMonthMapper } from '../../mappers/malware-evolution/malware-evolution-by-month.mapper';
import { OK } from 'http-status-codes';
import { MalwareEvolutionByWeekMapper } from '../../mappers/malware-evolution/malware-evolution-by-week.mapper';
import { MalwareEvolutionByCountryMapper } from '../../mappers/malware-evolution/malware-evolution-by-country.mapper';
import { MalwareEvolutionByMonthPeriodMapper } from '../../mappers/malware-evolution/malware-evolution-by-month-period.mapper';
import { PERIOD_TYPES } from '../../../../contexts/malware-evolution/application/find-by-period.usecase';
import { MalwareEvolutionByYearPeriodMapper } from '../../mappers/malware-evolution/malware-evolution-by-year-period.mapper';

export class FindMalwareEvolutionKPIController extends ExpressController {
  protected async implementation(req: Request, res: Response, next: NextFunction): Promise<void> {
    if (isNil(req.query) || isNil(req.query.operation)) {
      return next(BadRequest('The query params are not valid'));
    }

    switch (req.query.operation) {
      case 'month-evolution':
        return this.processMonthEvolutionOperation(req, res, next);
      case 'week-evolution':
        return this.processWeekEvolutionOperation(req, res, next);
      case 'country-evolution':
        return this.processCountryEvolutionOperation(req, res, next);
      case 'month-period-evolution':
        return this.processMonthPeriodEvolutionOperation(req, res, next);
      case 'year-period-evolution':
        return this.processYearPeriodEvolutionOperation(req, res, next);
      default:
        return next(BadRequest('The operation is not valid'));
    }
  }

  private async processMonthEvolutionOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findMalwareEvolutionByMonth();
    const monthEvolution = result.map(MalwareEvolutionByMonthMapper.toDTO);
    res.status(OK).send(monthEvolution);
  }

  private async processWeekEvolutionOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findMalwareEvolutionByWeek();
    const weekEvolution = result.map(MalwareEvolutionByWeekMapper.toDTO);
    res.status(OK).send(weekEvolution);
  }

  private async processCountryEvolutionOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const result = await findMalwareEvolutionByCountry();
    const countryEvolution = result.map(MalwareEvolutionByCountryMapper.toDTO);
    res.status(OK).send(countryEvolution);
  }

  private async processMonthPeriodEvolutionOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    if (isNil(req.query.month) || isNil(req.query.year)) {
      return next(BadRequest('This operation needs the query params: year and month'));
    }

    const result = await findMalwareEvolutionByPeriod({
      year: parseInt(req.query.year as string, 10),
      month: parseInt(req.query.month as string, 10),
      type: PERIOD_TYPES.ONE_MONTH
    });
    const periodEvolution = result.map(MalwareEvolutionByMonthPeriodMapper.toDTO);
    res.status(OK).send(periodEvolution);
  }

  private async processYearPeriodEvolutionOperation(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    if (isNil(req.query.year)) {
      return next(BadRequest('This operation needs the query param: year'));
    }

    const result = await findMalwareEvolutionByPeriod({
      year: parseInt(req.query.year as string, 10),
      type: PERIOD_TYPES.ONE_YEAR
    });
    const periodEvolution = result.map(MalwareEvolutionByYearPeriodMapper.toDTO);
    res.status(OK).send(periodEvolution);
  }
}
